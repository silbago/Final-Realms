#
# Configuration file for the MudOS LPmud driver.
#
# This file is intended for use with the Lima Mudlib and its corresponding
# version of the driver.
#
# The current versions are:
#
#    Lima Mudlib:  Lima 0.9r8 (pre-alpha)
#    MudOS:        MudOS v22a12
#
#
# 951030, Deathblade: updated - reorganized, commented, etc
#

# ------------------------------------------------------------------------
#
# Users of Lima:  you should change the following definitions to match
# your desires, needs, and setup.  Simply follow the directions for each
# option and things should work okay.  Each option will be labeled on
# whether it is required to be changed, or if it is optional.  Anything
# that is optional is subject to your discretion.
#

#
# [ REQUIRED ]
#
# This will be the name of your mud.
#
name : fr

#
# [ optional ]
#
# This will be the port number that your users will connect to
#
#port number : 4001
external_port_1 : telnet 4001
external_port_2 : telnet 2001

#
# [ optional ]
#
# The address server is an external program that lets the mud translate
# internet names to numbers (and vice versa).  This program is typically
# named "addr_server" and is built along with your driver executable.
# Do not confuse this with a Domain Name Server.
#
# This IP address should match where you started the program.  This is
# almost always "localhost".  The port number should match the command
# line argument that you gave the addr_server program.  The example
# below corresponds to running the addr_server on the same machine as
# your mud and using the following command to start it up:
#
#    % addr_server 9990
#
address server ip : localhost
address server port : 6364

#
# [ REQUIRED ]
#
# This should be the absolute pathname to where you placed your copy of
# the Mudlib.
#
mudlib directory : /local/mud/mudlib

#
# [ REQUIRED ]
#
# This should be the absolute pathname to where you placed your copy of
# the driver that you built.
#
binary directory : /local/mud/fluffos/bin


# ------------------------------------------------------------------------
#
# You shouldn't change anything below this point unless you know what
# you're changing.... =)
#

#
# NOTE: all paths below here are relative to the "mudlib directory"
#


#
# this include file is found in the include directories specified below
#
global include file : <standard_fr.h>

#
# debug.log and author/domain stats are stored here
#
log directory : /fr/log
 
#
# alternate debug.log file name (assumed to be in specified 'log directory')
#
debug log file : runtime_debug.log

#
# the directories which are searched by #include <...>
# for multiple dirs, separate each path with a ':'
#
include directories : /include
 
#
# the file which defines the master object
#
master file : /secure/master_fr
 
#
# the file where all global simulated efuns are defined.
#
simulated efun file : /secure/simul_efun

#
# file to swap to.  not used if time to swap is 0
# (not used by Lima)
#
swap file : /tmp/MudOS_swapfile.fr

#
# Directory to save binaries in.  (if BINARIES is defined)
# (not used by Lima)
#
save binaries directory : /fr/binaries

# if an object is left alone for a certain time, then the
# function clean_up will be called. This function can do anything,
# like destructing the object. If the function isn't defined by the
# object, then nothing will happen.
# This time should be substantially longer than the swapping time.
time to clean up : 900
 
# How long time until an unused object is swapped out.
# Machine with too many players and too little memory: 900 (15 minutes)
# Machine with few players and lot of memory: 10000
# Machine with infinite memory: 0 (never swap).
#time to swap : 1800
time to swap : 0
 
# How many seconds until an object is reset again.
time to reset : 900
 
# Maximum number of bits in a bit field. They are stored in printable
# strings, 6 bits per byte.
maximum bits in a bitfield : 1200
 
# Max number of local variables in a function.
maximum local variables : 128
 
# Maximum amount of "eval cost" per thread - execution is halted when 
# it is exceeded.
maximum evaluation cost : 1000000
 
# This is the maximum array size allowed for one single array.
maximum array size : 15000

# This is the maximum allowed size of a variable of type 'buffer'.
maximum buffer size : 400000
 
# Max size for a mapping
maximum mapping size : 15000
 
# Max inherit chain size
inherit chain size : 40
 
# maximum length of a string variable
maximum string length : 200000
 
# Max size of a file allowed to be read by 'read_file()'.
maximum read file size : 200000
 
# max number of bytes you allow to be read and written with read_bytes 
# and write_bytes
maximum byte transfer : 10000
 
# Reserve an extra memory area from malloc(), to free when we run out
# of memory.   If this value is 0, no area will be reserved.
reserved size : 0
 
# Define the size of the shared string hash table.  This number should
# a prime, probably between 1000 and 30000; if you set it to about 1/5
# of the number of distinct strings you have, you will get a hit ratio
# (number of comparisons to find a string) very close to 1, as found strings
# are automatically moved to the head of a hash chain.  You will never
# need more, and you will still get good results with a smaller table.
hash table size : 7001

# Object hash table size.
# Define this like you did with the strings; probably set to about 1/4 of
# the number of objects in a game, as the distribution of accesses to
# objects is somewhat more uniform than that of strings.
object table size : 1501
 
# default no-matching-action message
default fail message : What?

# default message when error() occurs (optional)
default error message : Something successfully didn't happen.

###############################################################################
#          The following aren't currently used or implemented (yet)           #
###############################################################################

# maximum number of users in the game (unused currently)
maximum users : 110

# Define the maximum stack size of the stack machine. This stack will also
# contain all local variables and arguments.  (unused currently)
evaluator stack size : 1000
 
# Define the size of the compiler stack. This defines how complex
# expressions the compiler can parse.  (unused currently)
compiler stack size : 200
 
# Define the maximum call depth for functions. (unused currently)
maximum call depth : 35

# There is a hash table for living objects, used by find_living().
# (unused currently)
living hash table size : 255
